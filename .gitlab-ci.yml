variables:
  ACTION: ""
  REPOSITORY: "https://$(CI_PIPELINE):$(CI_PIPELINE)@gitlab.com/smithashley/Kubernetes-Deployment-2.git"
  APP_VERSION: 1.0.0
  APP_ID: "stateful-counter"
  APP_PATH: "counter-app"
  IMAGE_PATH: "src"
  MANIFESTS_PATH: "manifests"
  DEPLOYMENT_PATH: "manifests/deployment"
  ARGO_APP_PATH: "argocd/application"
  TARGET_BRANCH: "main"
  SOURCE_BRANCH: "feature/counter-app"
  EKS_CLUSTER: "eks_cluster"
  REGION: "us-east-1"
  NAMESPACE: "staging"
  docker_url: smithashley/stateful-counter


stages: 
  - build-image
  - iac-scan
  - deploy-code
  - deploy-app
  - delete-app

build-image:
  rules:
    - if: $ACTION == "create_image"
  image: docker:latest
  stage: build-image
  services:
    - name: docker:dind
  script:
  - ls
  - echo "Building image..."
  - docker build . --file src/Dockerfile -t $APP_ID
  # Install Trivy
  - |
    apk add --no-cache curl unzip
    curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.49.0
  # Ensure Trivy is in PATH
  - export PATH=$PATH:/usr/local/bin
  # Scan the image and fail the pipeline if critical vulnerabilities are found
  - |
    echo "Scanning image..."
    trivy i --severity CRITICAL --exit-code 1 $APP_ID
    if [[ $? -eq 1 ]]; then
      echo "Trivy scan found high or critical CVEs in image"
      exit 1
    fi
  - echo "Image scan(s) complete."
  - |
    echo "Pushing image to Docker Hub..."
    docker login -u smithashley -p $docker_access_token
    docker tag $APP_ID smithashley/$APP_ID:$APP_VERSION
    docker push smithashley/$APP_ID:$APP_VERSION 


iac-scan:
  rules:
    - if: $ACTION == "create_application"
  image: ubuntu:latest
  stage: iac-scan
  script:
    - apt-get update && apt-get install -y python3-pip
    - pip3 install checkov
    - echo "Starting IaC scan..."
    - checkov --framework kubernetes -d ./$APP_PATH/$MANIFESTS_PATH/ || exit 1
    - echo "IaC scan complete."

deploy-code:
  stage: deploy-code
  needs:
    - iac-scan
  rules:
    - if: $ACTION == "create_application"
  script:
    - apt-get update && apt-get install -y git
    - git remote set-url origin $REPOSITORY
    - git fetch --all
    - git checkout $SOURCE_BRANCH
    - git checkout $TARGET_BRANCH 
    - git config --global user.name "$CI_USER_NAME"
    - git config --global user.email "$CI_USER_EMAIL"
    - git merge $SOURCE_BRANCH -m "Merge branch 'source-branch' into 'target-branch'" 
    - git push origin

deploy-app:
  rules:
    - if: $ACTION == "create_application"
  image: ubuntu:latest
  stage: deploy-app
  needs:
    - deploy-code
  script:
    - apt-get update && apt-get -y install curl unzip apt-transport-https ca-certificates gnupg
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - aws --version
    - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
    - apt-get update
    - apt-get install -y kubectl
    - echo "Deploying to EKS cluster..."
    - aws eks update-kubeconfig --name $EKS_CLUSTER --region $REGION
    - kubectl apply -f "local-repo/$APP_PATH/$ARGO_APP_PATH.yaml"
    - echo "Deployment to EKS cluster complete."

delete-app:
  rules:
    - if: $ACTION == "create_application"
  image: ubuntu:latest
  stage: delete-app
  script:
    - apt-get update && apt-get -y install curl unzip apt-transport-https ca-certificates gnupg
    - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    - unzip awscliv2.zip
    - ./aws/install
    - aws --version
    - curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    - echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | tee /etc/apt/sources.list.d/kubernetes.list
    - apt-get update
    - apt-get install -y kubectl
    - echo "Deleting Application..."
    - |
      argo_app_file="local-repo/$APP_PATH/$ARGO_APP_PATH.yaml"
      argocd_app=$(grep -Po '(?<=name: )[^[:space:]]+' "$argo_app_file")
    - aws eks update-kubeconfig --name $EKS_CLUSTER --region $REGION
    - kubectl delete application/$argocd_app -n argocd
    - echo "Delete is complete."
